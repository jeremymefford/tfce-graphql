name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    environment:
      name: prod
    outputs:
      should_release: ${{ steps.bump.outputs.should_release }}
      version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump type
        id: bump
        shell: bash
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          TYPE=$(printf '%s\n' "$COMMIT_MSG" | awk '
            match($0, /\[(MAJOR|MINOR|PATCH)\]/, m) {
              print tolower(m[1])
              exit
            }
          ')
          if [[ -n "$TYPE" ]]; then
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "type=$TYPE" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ "$COMMIT_MSG" =~ ^release:\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "::notice::Skipping release workflow for release commit."
          else
            echo "::notice::Skipping release workflow because commit message does not specify [MAJOR|MINOR|PATCH]."
          fi
          echo "should_release=false" >> "$GITHUB_OUTPUT"

      - name: Set up Node.js
        if: steps.bump.outputs.should_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: npm
          cache-dependency-path: |
            package-lock.json
            docs/package-lock.json

      - name: Install dependencies
        if: steps.bump.outputs.should_release == 'true'
        run: npm ci

      - name: Install docs dependencies
        if: steps.bump.outputs.should_release == 'true'
        working-directory: docs
        run: npm ci

      - name: Bump package version
        if: steps.bump.outputs.should_release == 'true'
        id: version
        run: |
          npm version ${{ steps.bump.outputs.type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Compile TypeScript
        if: steps.bump.outputs.should_release == 'true'
        run: npm run compile

      - name: Snapshot docs version
        if: steps.bump.outputs.should_release == 'true'
        working-directory: docs
        run: npm run docusaurus docs:version ${{ steps.version.outputs.new_version }}

      - name: Setup commit signing
        if: steps.bump.outputs.should_release == 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.ACTIONS_GPG_KEY }}
          passphrase: ${{ secrets.ACTIONS_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Build docs
        if: steps.bump.outputs.should_release == 'true'
        working-directory: docs
        run: npm run build

      - name: Commit release artifacts
        if: steps.bump.outputs.should_release == 'true'
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes detected; aborting release."
            exit 1
          fi
          git commit -S -m "release: v${{ steps.version.outputs.new_version }}"
          git push origin HEAD:main
          steps:
      
      - name: Upload docs artifact
        if: steps.bump.outputs.should_release == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/build
            
      - name: Deploy to GitHub Pages
        if: steps.bump.outputs.should_release == 'true'
        uses: actions/deploy-pages@v4
        id: deploy

      - name: Create tag
        if: steps.bump.outputs.should_release == 'true'
        run: |
          git tag v${{ steps.version.outputs.new_version }}
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Create GitHub release
        if: steps.bump.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: v${{ steps.version.outputs.new_version }}
          generate_release_notes: true

  publish-image:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=v${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build & push (multi-arch, SBOM, provenance)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            VCS_REF=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign images with Cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | while read -r tag; do
            [ -z "$tag" ] && continue
            cosign sign --yes "$tag"
          done

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
